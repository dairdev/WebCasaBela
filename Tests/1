#!/bin/bash

# ========================================
# SCRIPT DE PRUEBAS PARA API CASABELA
# ========================================

# Configuraci√≥n
API_BASE_URL="http://localhost:8000"
LOGIN_EMAIL="admin@casabela.com"
LOGIN_PASSWORD="admin123"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # Sin color

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${CYAN}========================================${NC}"
    echo -e "${CYAN}  SCRIPT DE PRUEBAS API CASABELA${NC}"
    echo -e "${CYAN}========================================${NC}"
    echo ""
    echo -e "${YELLOW}Uso:${NC} $0 [comando] [par√°metros]"
    echo ""
    echo -e "${YELLOW}Comandos disponibles:${NC}"
    echo -e "  ${GREEN}login${NC}                           - Hacer login y obtener JWT token"
    echo -e "  ${GREEN}test-all${NC}                        - Ejecutar todas las pruebas"
    echo -e "  ${GREEN}users${NC}                           - Listar todos los usuarios"
    echo -e "  ${GREEN}user <id>${NC}                       - Obtener usuario espec√≠fico"
    echo -e "  ${GREEN}create-user${NC}                     - Crear nuevo usuario"
    echo -e "  ${GREEN}bulk-users${NC}                      - Crear usuarios en lote"
    echo -e "  ${GREEN}update-user <id>${NC}               - Actualizar usuario"
    echo -e "  ${GREEN}delete-user <id>${NC}               - Eliminar usuario"
    echo -e "  ${GREEN}properties${NC}                      - Listar propiedades"
    echo -e "  ${GREEN}properties-filtered${NC}             - Listar propiedades con filtros"
    echo -e "  ${GREEN}property <id>${NC}                   - Obtener propiedad espec√≠fica"
    echo -e "  ${GREEN}create-property${NC}                 - Crear nueva propiedad"
    echo -e "  ${GREEN}update-property <id>${NC}           - Actualizar propiedad"
    echo -e "  ${GREEN}delete-property <id>${NC}           - Eliminar propiedad"
    echo -e "  ${GREEN}property-stats${NC}                  - Obtener estad√≠sticas de propiedades"
    echo -e "  ${GREEN}me${NC}                              - Obtener informaci√≥n del usuario actual"
    echo -e "  ${GREEN}status${NC}                          - Verificar estado de la API"
    echo ""
    echo -e "${YELLOW}Ejemplos:${NC}"
    echo -e "  $0 login"
    echo -e "  $0 test-all"
    echo -e "  $0 properties-filtered"
    echo -e "  $0 create-user"
    echo -e "  $0 user 1"
    echo ""
    echo -e "${YELLOW}Variables de entorno:${NC}"
    echo -e "  ${BLUE}JWT_TOKEN${NC}     - Token JWT (se llena autom√°ticamente con login)"
    echo -e "  ${BLUE}API_BASE_URL${NC}  - URL base de la API (default: http://localhost)"
    echo ""
}

# Funci√≥n para mostrar respuestas JSON formateadas
show_response() {
    local status_code=$1
    local response=$2
    local title=$3
    
    echo -e "\n${PURPLE}=== $title ===${NC}"
    echo -e "${BLUE}Status Code:${NC} $status_code"
    
    if command -v jq &> /dev/null; then
        echo -e "${BLUE}Response:${NC}"
        echo "$response" | jq '.'
    else
        echo -e "${BLUE}Response:${NC} $response"
    fi
    echo ""
}

# Funci√≥n para hacer login y obtener JWT token
do_login() {
    echo -e "${YELLOW}üîê Haciendo login...${LOGIN_EMAIL}/${LOGIN_PASSWORD} ${NC}"
    
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
        -X POST "${API_BASE_URL}/api/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$LOGIN_EMAIL\",\"password\":\"$LOGIN_PASSWORD\"}")
    
    status_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
    body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
    
    if [ $status_code -eq 200 ]; then
        echo "Setting Token in JWT_TOKEN"
        if command -v jq &> /dev/null; then
            export JWT_TOKEN=$(echo $body | jq -r '.token')
        else
            # Extracci√≥n manual del token si jq no est√° disponible
            export JWT_TOKEN=$(echo $body | grep -o '"token":"[^"]*' | grep -o '[^"]*$')
        fi
        
        if [ ! -z "$JWT_TOKEN" ] && [ "$JWT_TOKEN" != "null" ]; then
            echo -e "${GREEN}‚úÖ Login exitoso!${NC}"
            echo -e "${CYAN}JWT Token guardado en variable de entorno JWT_TOKEN${NC}"
            show_response $status_code "$body" "LOGIN RESPONSE"
        else
            echo -e "${RED}‚ùå Error: No se pudo extraer el token${NC}"
            show_response $status_code "$body" "LOGIN ERROR"
            exit 1
        fi
    else
        echo -e "${RED}‚ùå Error en login${NC}"
        show_response $status_code "$body" "LOGIN ERROR"
        exit 1
    fi
}

# Funci√≥n para verificar si hay token
check_token() {
    if [ -z "$JWT_TOKEN" ]; then
        echo -e "${RED}‚ùå No hay JWT token. Ejecuta primero: $0 login${NC}"
        exit 1
    fi
}

# Funci√≥n para hacer request autenticado
make_auth_request() {
    local method=$1
    local endpoint=$2
    local data=$3
    local title=$4
    
    check_token
    
    if [ -z "$data" ]; then
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X $method "${API_BASE_URL}${endpoint}" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "Content-Type: application/json")
    else
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X $method "${API_BASE_URL}${endpoint}" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$data")
    fi
    
    status_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
    body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
    
    show_response $status_code "$body" "$title"
}

# Funciones de la API
get_users() {
    make_auth_request "GET" "/api/users" "" "LISTAR USUARIOS"
}

get_user() {
    local user_id=$1
    if [ -z "$user_id" ]; then
        echo -e "${RED}‚ùå Error: Se requiere ID de usuario${NC}"
        echo -e "${YELLOW}Uso:${NC} $0 user <id>"
        exit 1
    fi
    make_auth_request "GET" "/api/users/$user_id" "" "OBTENER USUARIO $user_id"
}

create_user() {
    local email="nuevo_usuario_$(date +%s)@example.com"
    local password="password123"
    local role_id=2
    
    local data="{\"email\":\"$email\",\"password\":\"$password\",\"role_id\":$role_id}"
    make_auth_request "POST" "/api/users" "$data" "CREAR USUARIO"
}

bulk_create_users() {
    local timestamp=$(date +%s)
    local data="{
        \"users\": [
            {
                \"email\": \"usuario1_${timestamp}@example.com\",
                \"password\": \"password123\",
                \"role_id\": 2
            },
            {
                \"email\": \"usuario2_${timestamp}@example.com\",
                \"password\": \"password456\",
                \"role_id\": 2
            },
            {
                \"email\": \"admin_${timestamp}@example.com\",
                \"password\": \"admin123\",
                \"role_id\": 1
            }
        ]
    }"
    make_auth_request "POST" "/api/users/bulk" "$data" "CREAR USUARIOS EN LOTE"
}

update_user() {
    local user_id=$1
    if [ -z "$user_id" ]; then
        echo -e "${RED}‚ùå Error: Se requiere ID de usuario${NC}"
        echo -e "${YELLOW}Uso:${NC} $0 update-user <id>"
        exit 1
    fi
    
    local email="usuario_actualizado_$(date +%s)@example.com"
    local data="{\"email\":\"$email\",\"role_id\":2}"
    make_auth_request "PUT" "/api/users/$user_id" "$data" "ACTUALIZAR USUARIO $user_id"
}

delete_user() {
    local user_id=$1
    if [ -z "$user_id" ]; then
        echo -e "${RED}‚ùå Error: Se requiere ID de usuario${NC}"
        echo -e "${YELLOW}Uso:${NC} $0 delete-user <id>"
        exit 1
    fi
    make_auth_request "DELETE" "/api/users/$user_id" "" "ELIMINAR USUARIO $user_id"
}

get_properties() {
    make_auth_request "GET" "/api/properties" "" "LISTAR PROPIEDADES"
}

get_properties_filtered() {
    make_auth_request "GET" "/api/properties?active=1&to_rent=1&page=1&per_page=5&sort_by=created_at&sort_order=desc" "" "LISTAR PROPIEDADES CON FILTROS"
}

get_property() {
    local property_id=$1
    if [ -z "$property_id" ]; then
        echo -e "${RED}‚ùå Error: Se requiere ID de propiedad${NC}"
        echo -e "${YELLOW}Uso:${NC} $0 property <id>"
        exit 1
    fi
    make_auth_request "GET" "/api/properties/$property_id" "" "OBTENER PROPIEDAD $property_id"
}

create_property() {
    local timestamp=$(date +%s)
    local data="{
        \"description\": \"Hermosa casa de prueba creada el $(date)\",
        \"address\": \"Av. Test $timestamp\",
        \"district_id\": 1,
        \"propertytype_id\": 1,
        \"number\": \"$timestamp\",
        \"shown_price\": 250000,
        \"rooms\": 3,
        \"bathrooms\": 2,
        \"garages\": 1,
        \"to_sell\": true,
        \"is_active\": true
    }"
    make_auth_request "POST" "/api/properties" "$data" "CREAR PROPIEDAD"
}

update_property() {
    local property_id=$1
    if [ -z "$property_id" ]; then
        echo -e "${RED}‚ùå Error: Se requiere ID de propiedad${NC}"
        echo -e "${YELLOW}Uso:${NC} $0 update-property <id>"
        exit 1
    fi
    
    local data="{
        \"shown_price\": 280000,
        \"rooms\": 4,
        \"description\": \"Propiedad actualizada el $(date)\",
        \"is_active\": true
    }"
    make_auth_request "PUT" "/api/properties/$property_id" "$data" "ACTUALIZAR PROPIEDAD $property_id"
}

delete_property() {
    local property_id=$1
    if [ -z "$property_id" ]; then
        echo -e "${RED}‚ùå Error: Se requiere ID de propiedad${NC}"
        echo -e "${YELLOW}Uso:${NC} $0 delete-property <id>"
        exit 1
    fi
    make_auth_request "DELETE" "/api/properties/$property_id" "" "ELIMINAR PROPIEDAD $property_id"
}

get_property_stats() {
    make_auth_request "GET" "/api/properties/stats" "" "ESTAD√çSTICAS DE PROPIEDADES"
}

get_me() {
    make_auth_request "GET" "/api/auth/me" "" "INFORMACI√ìN USUARIO ACTUAL"
}

check_status() {
    echo -e "${YELLOW}üìä Verificando estado de la API...${NC}"
    
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
        -X GET "${API_BASE_URL}/")
    
    status_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
    body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
    
    show_response $status_code "$body" "ESTADO DE LA API"
}

test_all() {
    echo -e "${CYAN}üöÄ Ejecutando todas las pruebas...${NC}\n"
    
    # 1. Login
    do_login
    
    # 2. Estado de la API
    check_status
    
    # 3. Usuario actual
    get_me
    
    # 4. Usuarios
    get_users
    create_user
    bulk_create_users
    
    # 5. Propiedades
    get_properties
    get_properties_filtered
    create_property
    get_property_stats
    
    echo -e "\n${GREEN}‚úÖ Todas las pruebas completadas!${NC}"
}

# Funci√≥n principal
main() {
    case "$1" in
        "login")
            do_login
            ;;
        "test-all")
            test_all
            ;;
        "users")
            get_users
            ;;
        "user")
            get_user "$2"
            ;;
        "create-user")
            create_user
            ;;
        "bulk-users")
            bulk_create_users
            ;;
        "update-user")
            update_user "$2"
            ;;
        "delete-user")
            delete_user "$2"
            ;;
        "properties")
            get_properties
            ;;
        "properties-filtered")
            get_properties_filtered
            ;;
        "property")
            get_property "$2"
            ;;
        "create-property")
            create_property
            ;;
        "update-property")
            update_property "$2"
            ;;
        "delete-property")
            delete_property "$2"
            ;;
        "property-stats")
            get_property_stats
            ;;
        "me")
            get_me
            ;;
        "status")
            check_status
            ;;
        "help"|"-h"|"--help"|"")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Comando desconocido: $1${NC}"
            echo -e "${YELLOW}Usa '$0 help' para ver los comandos disponibles${NC}"
            exit 1
            ;;
    esac
}

# Verificar dependencias opcionales
check_dependencies() {
    if ! command -v curl &> /dev/null; then
        echo -e "${RED}‚ùå Error: curl no est√° instalado${NC}"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Advertencia: jq no est√° instalado. Las respuestas JSON no se formatear√°n${NC}"
        echo -e "${YELLOW}   Para instalar jq: sudo apt-get install jq (Ubuntu/Debian) o brew install jq (macOS)${NC}\n"
    fi
}

# Verificar dependencias y ejecutar funci√≥n principal
check_dependencies
main "$@"
